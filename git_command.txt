Workspace：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
Remote：远程仓库

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone url

# 克隆某一个分支到本地
$ git clone -b 分支名字 远程库
 
# 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name "[name]"
$ git config [--global] user.email "[email address]"

# 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

#撤销git add 操作
$ git reset HEAD   表示撤销所有已经add的文件
$ git reset HEAD -filename   表示撤销某个文件或者文件夹

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]


# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

$ git config user.name
$ git config user.email

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...

# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

$ git checkout -- filName (撤销本地工作区的某个文件修改,使其回到上一次commit或者add的状态)

$ git checkout branchName  (切换到某分支)

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]


# 显示有变更的文件
$ git status

# 显示当前分支的版本历史，也可用来查看本地当前版本号，第一个就是当前版本
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff
$ git diff filename (查看某个文件的变化)

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD
git
# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat "@{0 day ago}"

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog

# 下载远程仓库的所有变动
$ git fetch [remote]

# 遇见“请输入提交消息解释为什么这种合并是必要的”
$ git 在pull或者合并分支的时候有时会遇到。可以不管(直接下面3,4步)，如果要输入解释的话就需要:
  1.按键盘字母 i 进入insert模式
  2.修改最上面那行黄色合并信息,可以不修改
  3.按键盘左上角"Esc
  4.输入":wq",注意是冒号+wq,按回车键即可

# 首先从远程的origin的master主分支下载最新的版本到origin/master分支上(推荐用这种方式！！！！)
   然后比较本地的master分支和origin/master分支的差别
   最后进行合并
$ git stash (如果要保存本地工作区未提交的改动)
============================
$ git fetch origin master
  git log -p master..origin/master
  git merge origin/master
===================================
$ git stash pop (如果要移入刚才保存的未提交的本地改动)

用另一种方式：
# 从远程获取最新的版本到本地的test分支上，tmp即表示临时的test分支，不用改
   之后再进行比较合并
$ git fetch origin master:tmp
  git diff tmp 
  git merge tmp

# 远端库名为 origin, 你要比较的本地分支为 test, 远端分支为 xxx,获取远端库最新信息,做diff
$ git fetch origin
  git diff test origin/xxx


# 显示所有远程仓库
$ git remote -v


# 显示某个远程仓库的信息
$ git remote show [remote]

# 更新远程仓库（先删后加）
$ git remote rm origin
  git remote add origin https://github.com/HelloGabo/MyUnityTest.git


# 增加一个新的远程仓库，并命名
$ git remote add origin https://github.com/HelloGabo/MyUnityTest.git

# 显示fatal: remote origin already exists. 
$ git remote rm origin (删除远程git仓库)
  如果执行git remote rm origin 报错，手动修改gitconfig内容
  vi .git/config
  把 remote "origin" 那一行删掉


# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]
 -
# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all

# 恢复暂存区的指定文件到工作区
$ git checkout [file] 

# 恢复某个commit的指定文件到暂存区和工作区git 
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区沟通
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# !!!如出现Unmerged paths....等等，也可以使用这一句
$ git reset --hard 

# 若出现本地和暂存区冲突，“your local changes would be overwritten by merge. commit stash or revert them to proceed.”
$  有三种做法：
  1、提交改动  git commit -m "change"
  2、暂存        git stash    
                 git stash pop
  3、抛弃本地所有改动   git reset --hard


# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit] 

# 版本回退
$ git reset --hard ad2080c

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将工作区未提交的变化保存到git栈中，稍后再移入
$ git stash
  .......
  git stash list (用来查看所有存入git栈中的stash)
$ git stash pop
  git stash pop stash@{0}  (恢复栈中第一个stash)
  git stash clear (清除所有stash数据)

# 解决本地与远程库冲突
  git add filename
  git commit 
  git pull --rebase 
 (若有冲突，分两种，一是在不同的地方冲突，git可自己合并。二是在同一个地方冲突，自己手动更改，然后)
  git rebase --continue
 (重复第三、四步直到所有冲突都解决)
  git push
